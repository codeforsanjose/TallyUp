AWSTemplateFormatVersion: 2010-09-09
Description: >-
  tally-up-backend
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  CustomDomainName:
    Type: String
    Description: Custom domain name for the API
    Default: ""
  CustomDomainCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the custom domain
    Default: arn:aws:acm:us-east-1:253016134262:certificate/fe98691e-f11c-45eb-84c7-64c98d6e588c

Globals:
  Function:
    Runtime: nodejs22.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100
    Handler: index.handler
    Environment:
      Variables:
        DB_URL_SECRET_ARN: !Ref dbConnectionSecret
    LoggingConfig:
      LogGroup: !Sub "/aws/lambda/${AWS::StackName}"

Conditions:
  HasCustomDomain:
    Fn::Not:
      - Fn::Equals:
          - !Ref CustomDomainName
          - ""

Resources:
  apiMain:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: API for Tally Up
      StageName: prod
      FailOnWarnings: true
  argon2Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Argon2 layer for Tally Up
      ContentUri: ./layers/argon2/argon2-layer.zip
      CompatibleRuntimes:
        - nodejs22.x
  apiAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/api-authorizer-function
      Handler: index.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 100
  openApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/openapi-function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiMain
            Method: GET
            Path: /api/openapi.yaml
            TimeoutInMillis: 5000
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/login-function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiMain
            Method: POST
            Path: /api/login
            TimeoutInMillis: 10000
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref jwtSecret
      Policies:
        - SecretsManagerReadWrite
      Layers:
        - !Ref argon2Layer
  refreshTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/refresh-token-function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiMain
            Method: POST
            Path: /api/refresh-token
            TimeoutInMillis: 5000
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref jwtSecret
      Policies:
        - SecretsManagerReadWrite
  registerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/register-function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiMain
            Method: POST
            Path: /api/register
            TimeoutInMillis: 10000 # Argon2 is slow on purpose
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref jwtSecret
      Policies:
        - SecretsManagerReadWrite
        - AmazonSESFullAccess
      Layers:
        - !Ref argon2Layer
  resendVerificationEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/resend-verification-email-function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiMain
            Method: GET
            Path: /api/resend-verification-email
            TimeoutInMillis: 5000
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref jwtSecret
      Policies:
        - SecretsManagerReadWrite
        - AmazonSESFullAccess
  verifyEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/build/verify-email-function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref apiMain
            Method: GET
            Path: /api/verify-email
            TimeoutInMillis: 5000
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref jwtSecret
      Policies:
        - SecretsManagerReadWrite
      Layers:
        - !Ref argon2Layer
  indexDotHtml:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  indexDotHtmlPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref indexDotHtml
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::${indexDotHtml}/*"
  cloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If [HasCustomDomain, !Ref CustomDomainName, !Ref "AWS::NoValue"]
        Origins:
          - Id: indexDotHtml
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
            DomainName: !Sub "${indexDotHtml}.s3-website-${AWS::Region}.amazonaws.com"
          - Id: apiMain
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            DomainName: !Sub "${apiMain}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
        Enabled: true
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: apiMain
            ViewerProtocolPolicy: redirect-to-https
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled TODO: Set to CachingOptimized when API is ready
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: indexDotHtml
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CustomDomainCertificateArn
            MinimumProtocolVersion: TLSv1.2_2021
            SslSupportMethod: sni-only
          - !Ref "AWS::NoValue"
  dbConnectionSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Connection string for Neon database
      Name: neon-connection-string
  jwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: JWT secret key for Tally Up
      Name: tally-up-jwt-secret
      GenerateSecretString:
        RequireEachIncludedType: true
  lambdaLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: 1 # TODO: Set to 7 or 14 days for production
  tallyUpGithubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: arn:aws:iam::253016134262:oidc-provider/token.actions.githubusercontent.com
            Action:
              - sts:AssumeRoleWithWebIdentity
              - sts:TagSession
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub:
                  - repo:codeforsanjose/TallyUp:ref:refs/heads/main
              ForAllValues:StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
                token.actions.githubusercontent.com:iss: https://token.actions.githubusercontent.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: DenyEc2Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Deny
                Action:
                  - ec2:*
                  - glue:*
                  - sagemaker:*
                  - athena:*
                  - emr:*
                  - redshift:*
                  - kinesis:*
                  - redshift:*
                  - rds:*
                  - dynamodb:*
                Resource: "*"
Outputs:
  S3BucketName:
    Description: S3 bucket name for index.html
    Value: !Sub s3://${indexDotHtml}
